const express = require('express');
const jwt = require('jsonwebtoken'); // Importer jsonwebtoken
const SECRET_KEY = "fallback_secret";
const app = express();

// Middleware pour g√©rer CORS (Cross-Origin Resource Sharing)
app.use((req, res, next) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization"); // Autorise les headers n√©cessaires, dont Authorization
    res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS"); // M√©thodes autoris√©es
    if (req.method === "OPTIONS") {
        return res.status(200).end(); // R√©pondre imm√©diatement au pr√©-vol OPTIONS
    }
    next();
});

// Middleware pour v√©rifier le token JWT
const verifyToken = (req, res, next) => {
    const token = req.headers.authorization?.split(' ')[1]; // R√©cup√®re le token apr√®s "Bearer "

    if (!token) {
        console.log("üö® Aucun token trouv√©.");
        return res.status(401).json({ error: "Acc√®s refus√©, token manquant" });
    }

    try {
        const decoded = jwt.verify(token, SECRET_KEY); // V√©rifie et d√©code le token
        console.log("‚úÖ Token d√©cod√© : ", decoded);
        req.userId = decoded.id;  // Met l'ID utilisateur dans la requ√™te pour l'utiliser apr√®s
        next(); // Passe au middleware suivant ou √† la route
    } catch (error) {
        console.error("üö® Erreur de v√©rification trop chiant du token : ", error.message);
        return res.status(403).json({ error: "Token invalide" });
    }
};
 function isTokenExpired(token) {
  try {
    const payload = JSON.parse(atob(token.split('.')[1])); // D√©coder la charge utile du JWT
    const expiration = payload.exp * 1000; // Convertir en millisecondes
    return Date.now() > expiration; // V√©rifier si le token est expir√©
  } catch (error) {
    return true; // Consid√©rer comme expir√© si le token est invalide
  }
}
module.exports = verifyToken;
