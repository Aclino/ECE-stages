const express = require('express');
const jwt = require('jsonwebtoken'); // Importer jsonwebtoken
const SECRET_KEY = "votre_clÃ©_secrÃ¨te";
const app = express();

// Middleware pour gÃ©rer CORS (Cross-Origin Resource Sharing)
app.use((req, res, next) => {
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization"); // Autorise les headers nÃ©cessaires, dont Authorization
    res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS"); // MÃ©thodes autorisÃ©es
    if (req.method === "OPTIONS") {
        return res.status(200).end(); // RÃ©pondre immÃ©diatement au prÃ©-vol OPTIONS
    }
    next();
});

// Middleware pour vÃ©rifier le token JWT
const verifyToken = (req, res, next) => {
    const token = req.headers.authorization?.split(' ')[1]; // RÃ©cupÃ¨re le token aprÃ¨s "Bearer "

    if (!token) {
        console.log("ğŸš¨ Aucun token trouvÃ©.");
        return res.status(401).json({ error: "AccÃ¨s refusÃ©, token manquant" });
    }

    try {
        const decoded = jwt.verify(token, SECRET_KEY); // VÃ©rifie et dÃ©code le token
        console.log("âœ… Token dÃ©codÃ© : ", decoded);
        req.userId = decoded.id;  // Met l'ID utilisateur dans la requÃªte pour l'utiliser aprÃ¨s
        next(); // Passe au middleware suivant ou Ã  la route
    } catch (error) {
        console.error("ğŸš¨ Erreur de vÃ©rification trop chiant du token : ", error.message);
        return res.status(403).json({ error: "Token invalide" });
    }
};

module.exports = verifyToken;
