require('dotenv').config();
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const jwt = require('jsonwebtoken'); // Ajout pour d√©coder le token
const pool = require('../../db');
const SECRET_KEY = "votre_cl√©_secr√®te";
const router = express.Router();


router.use(cors());
router.use(bodyParser.json());
router.use(bodyParser.urlencoded({ extended: true }));

const verifyToken = (req, res, next) => {
    const token = req.headers.authorization?.split(' ')[1]; // R√©cup√®re le token apr√®s "Bearer "
    
    console.log("üîë Token re√ßu :", token);

    if (!token) {
        return res.status(401).json({ error: "Acc√®s refus√©, token manquant" });
    }

    try {
        const decoded = jwt.verify(token, SECRET_KEY); // V√©rifie et d√©code le token
        console.log("‚úÖ Token d√©cod√© :", decoded);
        req.userId = decoded.id;
        next();
    } catch (error) {
        console.error("üö® Erreur de v√©rification du token :", error.message);
        return res.status(403).json({ error: "Token invalide" });
    }
};

// ‚úÖ Route pour r√©cup√©rer les promotions d'un prof
router.get('/api/prof/promo', verifyToken, async (req, res) => {
    console.log("üîç Utilisateur authentifi√© :", req.userId);

    try {
        const query = `
            SELECT p.nom
            FROM competence.promotion p
            JOIN competence.utilisateur_assignement ua ON p.id_promotion = ua.id_promotion
            WHERE ua.id_utilisateur = $1;
        `;

        const promo = await pool.query(query, [req.userId]);

        if (promo.rows.length === 0) {
            console.log("‚ö†Ô∏è Aucun r√©sultat trouv√© pour l'utilisateur ID :", req.userId);
            return res.status(403).json({ error: "Aucune promotion associ√©e √† cet utilisateur." });
        }

        res.json(promo.rows.map(row => row.nom)); // Renvoie seulement un tableau de noms de promos
    } catch (error) {
        console.error("üö® Erreur serveur :", error);
        res.status(500).json({ error: "Erreur serveur, impossible de r√©cup√©rer les promos." });
    }
});

// ‚úÖ Route pour r√©cup√©rer les mati√®res associ√©es √† une promotion sp√©cifique
router.get('/api/prof/promo/:nom/matieres', verifyToken, async (req, res) => {
    const promoNom = req.params.nom;

    try {
        const query = `
            SELECT m.id_matiere, m.nom AS matiere_nom
            FROM competence.matiere m
            JOIN competence.promomatiere_assignement pa ON m.id_matiere = pa.id_matiere
            JOIN competence.promotion p ON pa.id_promotion = p.id_promotion
            WHERE p.nom = $1;
        `;

        const matieres = await pool.query(query, [promoNom]);

        if (matieres.rows.length === 0) {
            return res.status(404).json({ error: "Aucune mati√®re trouv√©e pour cette promotion." });
        }

        res.json(matieres.rows);
    } catch (error) {
        console.error("üö® Erreur serveur :", error);
        res.status(500).json({ error: "Erreur serveur, impossible de r√©cup√©rer les mati√®res." });
    }
});

module.exports = router;
