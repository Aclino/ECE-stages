CREATE TABLE Utilisateur (
    id_utilisateur SERIAL PRIMARY KEY,
    nom VARCHAR(100),
    prenom VARCHAR(100),
    email VARCHAR(100) UNIQUE,
    mot_de_passe VARCHAR(100),
    actif BOOL
);

CREATE TABLE Promotion (
    id_promotion SERIAL PRIMARY KEY,
    nom VARCHAR(100),
    annee INT,
    code_inscription INT
);

CREATE TABLE Status (
    id_status SERIAL PRIMARY KEY,
    nom VARCHAR(100)
);

CREATE TABLE Role (
    id_role SERIAL PRIMARY KEY,
    nom VARCHAR(100)
);

CREATE TABLE Matiere (
    id_matiere SERIAL PRIMARY KEY,
    nom VARCHAR(100)
);

CREATE TABLE Question_type (
    id_question_type SERIAL PRIMARY KEY,
    nom VARCHAR(100)
);

CREATE TABLE Poids (
    id_poids SERIAL PRIMARY KEY,
    nom VARCHAR(100),
    valeur INT
);

CREATE TABLE Chapitre (
    id_chapitre SERIAL PRIMARY KEY,
    nom VARCHAR(100),
    ordre INT,
    description VARCHAR(1000),
    id_matiere INT,
    FOREIGN KEY (id_matiere) REFERENCES Matiere(id_matiere) ON DELETE CASCADE
);

CREATE TABLE Competence (
    id_competence SERIAL PRIMARY KEY,
    nom VARCHAR(100),
    ordre INT,
    description VARCHAR(100),
    id_chapitre INT,
    id_poids INT,
    FOREIGN KEY (id_chapitre) REFERENCES Chapitre(id_chapitre) ON DELETE CASCADE,
    FOREIGN KEY (id_poids) REFERENCES Poids(id_poids) ON DELETE CASCADE
);

CREATE TABLE Question (
    id_question SERIAL PRIMARY KEY,
    nom VARCHAR(100),
    enonce VARCHAR(100),
    id_competence INT,
    id_poids INT,
    id_question_type INT,
    FOREIGN KEY (id_competence) REFERENCES Competence(id_competence) ON DELETE CASCADE,
    FOREIGN KEY (id_poids) REFERENCES Poids(id_poids) ON DELETE CASCADE,
    FOREIGN KEY (id_question_type) REFERENCES Question_type(id_question_type) ON DELETE CASCADE
);

CREATE TABLE Reponse (
    reponse VARCHAR(100),
    explication VARCHAR(100),
    id_question INT,
    FOREIGN KEY (id_question) REFERENCES Question(id_question) ON DELETE CASCADE
);

CREATE TABLE Question_assignement (
    id_competence INT,
    id_question INT,
    FOREIGN KEY (id_competence) REFERENCES Competence(id_competence) ON DELETE CASCADE,
    FOREIGN KEY (id_question) REFERENCES Question(id_question) ON DELETE CASCADE
);

CREATE TABLE Proposition (
    id_proposition SERIAL PRIMARY KEY,
    enonce VARCHAR(100),
    explication VARCHAR(100),
    est_correcte BOOL,
    id_question INT,
    FOREIGN KEY (id_question) REFERENCES Question(id_question) ON DELETE CASCADE
);

CREATE TABLE Tentative (
    id_tentative SERIAL PRIMARY KEY,
    tentative_date DATE,
    enonce VARCHAR(100),
    id_utilisateur INT,
    id_question INT,
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateur(id_utilisateur) ON DELETE CASCADE,
    FOREIGN KEY (id_question) REFERENCES Question(id_question) ON DELETE CASCADE
);

CREATE TABLE Tentative_assignement (
    id_tentative INT,
    id_proposition INT,
    FOREIGN KEY (id_tentative) REFERENCES Tentative(id_tentative) ON DELETE CASCADE,
    FOREIGN KEY (id_proposition) REFERENCES Proposition(id_proposition) ON DELETE CASCADE
);

CREATE TABLE Fichier (
    nom VARCHAR(100),
    contenu VARCHAR(100),
    id_question INT,
    FOREIGN KEY (id_question) REFERENCES Question(id_question) ON DELETE CASCADE
);

CREATE TABLE Email_verification (
    id_utilisateur INT,
    id_question INT,
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateur(id_utilisateur) ON DELETE CASCADE,
    FOREIGN KEY (id_question) REFERENCES Question(id_question) ON DELETE CASCADE
);

CREATE TABLE Role_assignement (
    id_role INT,
    id_utilisateur INT,
    FOREIGN KEY (id_role) REFERENCES Role(id_role) ON DELETE CASCADE,
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateur(id_utilisateur) ON DELETE CASCADE
);

CREATE TABLE Utilisateur_assignement (
    id_promotion INT,
    id_utilisateur INT,
    FOREIGN KEY (id_promotion) REFERENCES Promotion(id_promotion) ON DELETE CASCADE,
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateur(id_utilisateur) ON DELETE CASCADE
);

CREATE TABLE PromoMatiere_assignement (
    id_promotion INT,
    id_matiere INT,
    FOREIGN KEY (id_promotion) REFERENCES Promotion(id_promotion) ON DELETE CASCADE,
    FOREIGN KEY (id_matiere) REFERENCES Matiere(id_matiere) ON DELETE CASCADE
);

CREATE TABLE Evaluation_auto (
    id_utilisateur INT,
    id_competence INT,
    id_status INT,
    evaluation_auto_date DATE,
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateur(id_utilisateur) ON DELETE CASCADE,
    FOREIGN KEY (id_competence) REFERENCES Competence(id_competence) ON DELETE CASCADE,
    FOREIGN KEY (id_status) REFERENCES Status(id_status) ON DELETE CASCADE
);

CREATE TABLE Auto_evaluation (
    id_utilisateur INT,
    id_competence INT,
    id_status INT,
    auto_evaluation_date DATE,
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateur(id_utilisateur) ON DELETE CASCADE,
    FOREIGN KEY (id_competence) REFERENCES Competence(id_competence) ON DELETE CASCADE,
    FOREIGN KEY (id_status) REFERENCES Status(id_status) ON DELETE CASCADE
);





  


INSERT INTO Question_type (nom)
VALUES 
    ('QCM'),
    ('QCU'),
    ('Question Ouverte');

INSERT INTO Matiere (nom)
VALUES 
    ('Mathématiques'),
    ('Physique'),
    ('Informatique');


INSERT INTO Chapitre (nom, ordre, description, id_matiere)
VALUES 
    ('Algèbre', 1, 'Chapitre sur les bases de l’algèbre', 1), -- Mathématiques
    ('Mécanique', 1, 'Introduction à la mécanique', 2),       -- Physique
    ('Programmation en C', 1, 'Bases de la programmation en C', 3);     -- Informatique

    
    INSERT INTO Poids (nom, valeur)
VALUES 
    ('Facile', 1);

INSERT INTO Competence (nom, ordre, description, id_chapitre, id_poids)
VALUES 
    ('Résolution d’équations', 1, 'Résoudre des équations simples', 1, 1),  -- Algèbre
    ('Loi de Newton', 1, 'Comprendre et appliquer la deuxième loi de Newton', 2, 1), -- Mécanique
    ('Oscillateurs harmoniques', 2, 'Comprendre les oscillateurs harmoniques', 2, 1), -- Mécanique
    ('Variables et types', 1, 'Comprendre les bases des variables', 3, 1), -- Programmation
    ('Tests et boucles', 2, 'Comprendre la notion de boucle et de condition', 3, 1), -- Programmation
    ('Sous-programmes et multi-fichiers .c', 3, 'Partitionner son code', 3, 1), -- Programmation
    ('Structures et tableaux', 4, 'Regrouper ses variables', 3, 1); -- Programmation

    
    INSERT INTO Question (nom, enonce, id_competence, id_poids, id_question_type)
VALUES 
    ('Question Algèbre', 'Quelle est la solution de l’équation 2x + 3 = 7 ?', 1, 1, 1), -- QCM
    ('Question Mécanique', 'Quelle force faut-il appliquer pour accélérer un objet de 5kg à 2m/s² ?', 2, 1, 2), -- QCU
    ('Question Programmation', 'Quelle est la valeur de 5 + 3 * 2 ?', 3, 1, 3); -- Question ouverte

    
    INSERT INTO Proposition (enonce, explication, est_correcte, id_question)
VALUES 
    ('x = 2', 'La solution correcte est obtenue en isolant x : 2x + 3 = 7 donne x = 2.', true, 1),
    ('x = 3', 'Ceci est incorrect. Vous avez probablement oublié de soustraire correctement.', false, 1),
    ('x = 4', 'Ceci est incorrect. Vous avez mal divisé à la fin.', false, 1);

    
    INSERT INTO Proposition (enonce, explication, est_correcte, id_question)
VALUES 
    ('10N', 'La force est obtenue en utilisant F = m * a, soit 5kg * 2m/s² = 10N.', true, 2),
    ('5N', 'Ceci est incorrect. Vous avez mal calculé en utilisant F = m * a.', false, 2),
    ('15N', 'Ceci est incorrect. Vous avez probablement ajouté les valeurs au lieu de les multiplier.', false, 2);

    
    INSERT INTO Proposition (enonce, explication, est_correcte, id_question)
VALUES 
    ('11', 'Le résultat correct est obtenu grâce à la priorité des opérateurs : multiplication avant addition.', null, 3);
 -- Ajout de données dans la table Utilisateur
INSERT INTO Utilisateur (nom, prenom, email, mot_de_passe, actif)
VALUES 
    ('Dupont', 'Jean', 'jean.dupont@example.com', 'password123', TRUE),
    ('Martin', 'Sophie', 'sophie.martin@example.com', 'sophie2023', TRUE),
    ('Durand', 'Paul', 'paul.durand@example.com', 'paulsecure', FALSE);

-- Ajout de données dans la table Promotion
INSERT INTO Promotion (nom, annee, code_inscription)
VALUES 
    ('Promo 2023', 2023, 12345),
    ('Promo 2024', 2024, 67890);

-- Ajout de données dans la table Status
INSERT INTO status (id_status , nom)
VALUES 
    (1, 'Non fait'),
    (2, 'Pas reussit'),
    (3, 'reussit'); 

-- Ajout de données dans la table Role
INSERT INTO Role (nom)
VALUES 
    ('Admin'),
    ('Étudiant'),
    ('Professeur');

-- Ajout de données dans la table Tentative
INSERT INTO Tentative (tentative_date, enonce, id_utilisateur, id_question)
VALUES 
    ('2025-01-01', 'Essai pour résoudre 2x + 3 = 7', 1, 1),
    ('2025-01-02', 'Tentative de résoudre une question de mécanique', 2, 2),
    ('2025-01-03', 'Calcul d’une expression mathématique', 3, 3);

-- Ajout de données dans la table Tentative_assignement
INSERT INTO Tentative_assignement (id_tentative, id_proposition)
VALUES 
    (1, 1), -- Tentative correcte pour la question 1
    (2, 1), -- Tentative correcte pour la question 2
    (3, 1); -- Proposition correcte pour la question 3

-- Ajout de données dans la table Fichier
INSERT INTO Fichier (nom, contenu, id_question)
VALUES 
    ('Algèbre_Basique.pdf', 'Ce fichier contient une introduction à l’algèbre.', 1),
    ('Mécanique_Newton.pdf', 'Document sur les lois de Newton.', 2),
    ('Programmation_Bases.pdf', 'Cours sur les variables et les types en programmation.', 3);

-- Ajout de données dans la table Role_assignement
INSERT INTO Role_assignement (id_role, id_utilisateur)
VALUES 
    (1, 1), -- Jean Dupont est Admin
    (2, 2), -- Sophie Martin est Étudiante
    (3, 3); -- Paul Durand est Professeur

-- Ajout de données dans la table Utilisateur_assignement
INSERT INTO Utilisateur_assignement (id_promotion, id_utilisateur)
VALUES 
    (1, 1), -- Jean Dupont dans Promo 2023
    (1, 2), -- Sophie Martin dans Promo 2023
    (2, 3); -- Paul Durand dans Promo 2024

-- Ajout de données dans la table PromoMatiere_assignement
INSERT INTO PromoMatiere_assignement (id_promotion, id_matiere)
VALUES 
    (1, 1), -- Promo 2023 étudie Mathématiques
    (1, 2), -- Promo 2023 étudie Physique
    (2, 3); -- Promo 2024 étudie Informatique

-- Ajout de données dans la table Evaluation_auto
INSERT INTO Evaluation_auto (id_utilisateur, id_competence, id_status, evaluation_auto_date)
VALUES 
    (1, 1, 1, '2025-01-03'), -- Jean Dupont a évalué la compétence 1
    (2, 2, 1, '2025-01-04'), -- Sophie Martin a évalué la compétence 2
    (3, 3, 2, '2025-01-05'); -- Paul Durand a évalué la compétence 3 (Inactif)

-- Ajout de données dans la table Auto_evaluation
INSERT INTO Auto_evaluation (id_utilisateur, id_competence, id_status, auto_evaluation_date)
VALUES 
    (1, 1, 1, '2025-01-06'), -- Jean Dupont auto-évaluation sur compétence 1
    (2, 2, 1, '2025-01-07'), -- Sophie Martin auto-évaluation sur compétence 2
    (3, 3, 2, '2025-01-08'); -- Paul Durand auto-évaluation sur compétence 3 (Inactif)   


-- Ajout de données dans la table auto_evaluation
INSERT INTO auto_evaluation (id_status , id_utilisateur, id_competence)
VALUES 
    (3, 4, 4),
    (4, 4, 3),
    (4, 4, 2),
    (5, 4, 1);

insert into competence (id_competence, id_chapitre, ordre, nom)
values
	(8,1,2, 'Polynomes');


INSERT INTO auto_evaluation (id_status , id_utilisateur, id_competence)
VALUES 
    (1, 4, 8);