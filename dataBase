CREATE TABLE Utilisateur (
    id_utilisateur SERIAL  PRIMARY KEY,
    nom VARCHAR(100),
    email VARCHAR(100),
    mot_de_passe VARCHAR(100),
    actif bool
);

CREATE TABLE Promotion (
    id_promotion SERIAL  PRIMARY KEY,
    nom VARCHAR(100),
    annee INT,
    code_inscription INT
);
CREATE TABLE Status (
    id_status SERIAL PRIMARY KEY,
    nom VARCHAR(100)
);

CREATE TABLE Role (
    id_role SERIAL  PRIMARY KEY,
    nom VARCHAR(100)
);
CREATE TABLE Matiere (
    id_matiere  SERIAL PRIMARY KEY,
    nom VARCHAR(100)
);

CREATE TABLE Question_type (
    id_question_type  SERIAL PRIMARY KEY,
    nom VARCHAR(100)
);

CREATE TABLE Poids (
    id_poids  SERIAL PRIMARY KEY,
    nom VARCHAR(100),
    valeur INT
);

CREATE TABLE Chapitre (
    id_chapitre  SERIAL PRIMARY KEY,
    nom VARCHAR(100),
    ordre INT,
    description VARCHAR(1000),
    id_matiere INT,
    FOREIGN KEY (id_matiere) REFERENCES Matiere(id_matiere)
);

CREATE TABLE Competence (
    id_competence  SERIAL PRIMARY KEY,
    nom VARCHAR(100),
    ordre INT,
    description VARCHAR(100),
    id_chapitre INT,
    id_poids INT,
    FOREIGN KEY (id_chapitre) REFERENCES Chapitre(id_chapitre),
    FOREIGN KEY (id_poids) REFERENCES Poids(id_poids)
);

CREATE TABLE Question (
    id_question SERIAL PRIMARY KEY,
    nom VARCHAR(100),
    enonce VARCHAR(100),
    id_competence INT,
    id_poids INT,
    id_question_type INT,
    FOREIGN KEY (id_competence) REFERENCES Competence(id_competence),
    FOREIGN KEY (id_poids) REFERENCES Poids(id_poids),
    FOREIGN KEY (id_question_type) references Question_type(id_question_type)
);

CREATE TABLE Reponse (
    reponse VARCHAR(100),
    explication VARCHAR(100),
    id_question INT,
    FOREIGN KEY (id_question) REFERENCES Question(id_question)
);
CREATE TABLE Question_assignement (
    id_competence INT,
    id_question INT,
    FOREIGN KEY (id_competence) REFERENCES Competence(id_competence),
    FOREIGN KEY (id_question) REFERENCES Question(id_question)
);

CREATE TABLE Proposition (
    id_proposition SERIAL PRIMARY KEY,
    enonce VARCHAR(100),
    explication VARCHAR(100),
    est_correcte BOOL,
    id_question INT,
    FOREIGN KEY (id_question) REFERENCES Question(id_question)
);

CREATE TABLE Tentative (
    id_tentative SERIAL PRIMARY KEY,
    tentative_date date,
    enonce VARCHAR(100),
    id_utilisateur INT,
    id_question INT,
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateur(id_utilisateur),
    FOREIGN KEY (id_question) REFERENCES Question(id_question)
);

CREATE TABLE Tentative_assignement (
    id_tentative INT,
    id_proposition INT,
    FOREIGN KEY (id_tentative) REFERENCES Tentative(id_tentative),
    FOREIGN KEY (id_proposition) REFERENCES Proposition(id_proposition)
);

CREATE TABLE Fichier (
    nom VARCHAR(100),
    contenu VARCHAR(100),
    id_question INT,
    FOREIGN KEY (id_question) REFERENCES Question(id_question)
);

CREATE TABLE Email_verification (
    id_utilisateur INT,
    id_question INT,
    FOREIGN KEY (id_utilisateur) REFERENCES Competence(id_competence),
    FOREIGN KEY (id_question) REFERENCES Question(id_question)
);
CREATE TABLE Role_assignement (
    id_role INT,
    id_utilisateur INT,
    FOREIGN KEY (id_role) REFERENCES Role(id_role),
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateur(id_utilisateur)
);

CREATE TABLE Utilisateur_assignement (
    id_promotion INT,
    id_utilisateur INT,
    FOREIGN KEY (id_promotion) REFERENCES Promotion(id_promotion),
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateur(id_utilisateur)
);

CREATE TABLE PromoMatiere_assignement (
    id_promotion INT,
    id_matiere INT,
    FOREIGN KEY (id_promotion) REFERENCES Promotion(id_promotion),
    FOREIGN KEY (id_matiere) REFERENCES Matiere(id_matiere)
);

CREATE TABLE Evaluation_auto (
    id_utilisateur INT,
    id_competence INT,
    id_status INT,
    evaluation_auto_date date,
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateur(id_utilisateur),
    FOREIGN KEY (id_competence) REFERENCES Competence(id_competence),
    FOREIGN KEY (id_status) REFERENCES Status(id_status)
);

CREATE TABLE Auto_evaluation (
    id_utilisateur INT,
    id_competence INT,
    id_status INT,
    auto_evaluation_date date,
    FOREIGN KEY (id_utilisateur) REFERENCES Utilisateur(id_utilisateur),
    FOREIGN KEY (id_competence) REFERENCES Competence(id_competence),
    FOREIGN KEY (id_status) REFERENCES Status(id_status)
);



INSERT INTO Question_type (nom)
VALUES 
    ('QCM'),
    ('QCU'),
    ('Question Ouverte');

INSERT INTO Matiere (nom)
VALUES 
    ('Mathématiques'),
    ('Physique'),
    ('Informatique');


INSERT INTO Chapitre (nom, ordre, description, id_matiere)
VALUES 
    ('Algèbre', 1, 'Chapitre sur les bases de l’algèbre', 1), -- Mathématiques
    ('Mécanique', 1, 'Introduction à la mécanique', 2),       -- Physique
    ('Programmation', 1, 'Bases de la programmation', 3);     -- Informatique

    
    INSERT INTO Poids (nom, valeur)
VALUES 
    ('Facile', 1);

INSERT INTO Competence (nom, ordre, description, id_chapitre, id_poids)
VALUES 
    ('Résolution d’équations', 1, 'Résoudre des équations simples', 1, 1),  -- Algèbre
    ('Loi de Newton', 1, 'Comprendre et appliquer la deuxième loi de Newton', 2, 1), -- Mécanique
    ('Variables et types', 1, 'Comprendre les bases des variables', 3, 1); -- Programmation

    
    INSERT INTO Question (nom, enonce, id_competence, id_poids, id_question_type)
VALUES 
    ('Question Algèbre', 'Quelle est la solution de l’équation 2x + 3 = 7 ?', 1, 1, 1), -- QCM
    ('Question Mécanique', 'Quelle force faut-il appliquer pour accélérer un objet de 5kg à 2m/s² ?', 2, 1, 2), -- QCU
    ('Question Programmation', 'Quelle est la valeur de 5 + 3 * 2 ?', 3, 1, 3); -- Question ouverte

    
    INSERT INTO Proposition (enonce, explication, est_correcte, id_question)
VALUES 
    ('x = 2', 'La solution correcte est obtenue en isolant x : 2x + 3 = 7 donne x = 2.', true, 1),
    ('x = 3', 'Ceci est incorrect. Vous avez probablement oublié de soustraire correctement.', false, 1),
    ('x = 4', 'Ceci est incorrect. Vous avez mal divisé à la fin.', false, 1);

    
    INSERT INTO Proposition (enonce, explication, est_correcte, id_question)
VALUES 
    ('10N', 'La force est obtenue en utilisant F = m * a, soit 5kg * 2m/s² = 10N.', true, 2),
    ('5N', 'Ceci est incorrect. Vous avez mal calculé en utilisant F = m * a.', false, 2),
    ('15N', 'Ceci est incorrect. Vous avez probablement ajouté les valeurs au lieu de les multiplier.', false, 2);

    
    INSERT INTO Proposition (enonce, explication, est_correcte, id_question)
VALUES 
    ('11', 'Le résultat correct est obtenu grâce à la priorité des opérateurs : multiplication avant addition.', null, 3);
    
  
